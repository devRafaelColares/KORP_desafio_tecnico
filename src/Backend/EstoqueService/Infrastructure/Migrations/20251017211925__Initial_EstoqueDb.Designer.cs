// <auto-generated />
using System;
using EstoqueService.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstoqueService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251017211925__Initial_EstoqueDb")]
    partial class _Initial_EstoqueDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AI")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EstoqueService.Models.MovimentacaoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador da movimentação");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data da movimentação");

                    b.Property<string>("Observacao")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasComment("Observações da movimentação");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasComment("FK para produto");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasComment("Quantidade movimentada");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasComment("Tipo da movimentação: 0=Entrada,1=Saida");

                    b.HasKey("Id");

                    b.HasIndex("Data")
                        .HasDatabaseName("IX_Movimentacoes_Data");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_Movimentacoes_ProdutoId");

                    b.ToTable("MovimentacoesEstoque", (string)null);
                });

            modelBuilder.Entity("EstoqueService.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador do produto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoSKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("Código SKU do produto");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasComment("Descrição do produto");

                    b.Property<decimal>("Preco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Preço unitário");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("Token de concorrência para controle otimista");

                    b.Property<int>("Saldo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Saldo disponível em estoque");

                    b.HasKey("Id");

                    b.HasIndex("CodigoSKU")
                        .IsUnique()
                        .HasDatabaseName("UX_Produtos_CodigoSKU");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("EstoqueService.Models.MovimentacaoEstoque", b =>
                {
                    b.HasOne("EstoqueService.Models.Produto", "Produto")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Movimentacoes_Produtos");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("EstoqueService.Models.Produto", b =>
                {
                    b.Navigation("Movimentacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
